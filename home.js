/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./.modernizrrc.js":
/*!*************************!*\
  !*** ./.modernizrrc.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && _typeof(Symbol.iterator) === \"symbol\") { _typeof = function (_typeof2) { function _typeof(_x) { return _typeof2.apply(this, arguments); } _typeof.toString = function () { return _typeof2.toString(); }; return _typeof; }(function (obj) { return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj); }); } else { _typeof = function (_typeof3) { function _typeof(_x2) { return _typeof3.apply(this, arguments); } _typeof.toString = function () { return _typeof3.toString(); }; return _typeof; }(function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj); }); } return _typeof(obj); }\n\n;\n\n(function (window) {\n  var hadGlobal = 'Modernizr' in window;\n  var oldGlobal = window.Modernizr;\n  /*!\n  * modernizr v3.6.0\n  * Build https://modernizr.com/download?-pointerevents-touchevents-dontmin\n  *\n  * Copyright (c)\n  *  Faruk Ates\n  *  Paul Irish\n  *  Alex Sexton\n  *  Ryan Seddon\n  *  Patrick Kettner\n  *  Stu Cox\n  *  Richard Herrera\n  * MIT License\n  */\n\n  /*\n   * Modernizr tests which native CSS3 and HTML5 features are available in the\n   * current UA and makes the results available to you in two ways: as properties on\n   * a global `Modernizr` object, and as classes on the `<html>` element. This\n   * information allows you to progressively enhance your pages with a granular level\n   * of control over the experience.\n  */\n\n  ;\n\n  (function (window, document, undefined) {\n    var tests = [];\n    /**\n     *\n     * ModernizrProto is the constructor for Modernizr\n     *\n     * @class\n     * @access public\n     */\n\n    var ModernizrProto = {\n      // The current version, dummy\n      _version: '3.6.0',\n      // Any settings that don't work as separate modules\n      // can go in here as configuration.\n      _config: {\n        'classPrefix': '',\n        'enableClasses': true,\n        'enableJSClass': true,\n        'usePrefixes': true\n      },\n      // Queue of tests\n      _q: [],\n      // Stub these for people who are listening\n      on: function on(test, cb) {\n        // I don't really think people should do this, but we can\n        // safe guard it a bit.\n        // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n        // This is in case people listen to synchronous tests. I would leave it out,\n        // but the code to *disallow* sync tests in the real version of this\n        // function is actually larger than this.\n        var self = this;\n        setTimeout(function () {\n          cb(self[test]);\n        }, 0);\n      },\n      addTest: function addTest(name, fn, options) {\n        tests.push({\n          name: name,\n          fn: fn,\n          options: options\n        });\n      },\n      addAsyncTest: function addAsyncTest(fn) {\n        tests.push({\n          name: null,\n          fn: fn\n        });\n      }\n    }; // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n\n    var Modernizr = function Modernizr() {};\n\n    Modernizr.prototype = ModernizrProto; // Leak modernizr globally when you `require` it rather than force it here.\n    // Overwrite name so constructor name is nicer :D\n\n    Modernizr = new Modernizr();\n    var classes = [];\n    /**\n     * is returns a boolean if the typeof an obj is exactly type.\n     *\n     * @access private\n     * @function is\n     * @param {*} obj - A thing we want to check the type of\n     * @param {string} type - A string to compare the typeof against\n     * @returns {boolean}\n     */\n\n    function is(obj, type) {\n      return (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === type;\n    }\n\n    ;\n    /**\n     * Run through all tests and detect their support in the current UA.\n     *\n     * @access private\n     */\n\n    function testRunner() {\n      var featureNames;\n      var feature;\n      var aliasIdx;\n      var result;\n      var nameIdx;\n      var featureName;\n      var featureNameSplit;\n\n      for (var featureIdx in tests) {\n        if (tests.hasOwnProperty(featureIdx)) {\n          featureNames = [];\n          feature = tests[featureIdx]; // run the test, throw the return value into the Modernizr,\n          // then based on that boolean, define an appropriate className\n          // and push it into an array of classes we'll join later.\n          //\n          // If there is no name, it's an 'async' test that is run,\n          // but not directly added to the object. That should\n          // be done with a post-run addTest call.\n\n          if (feature.name) {\n            featureNames.push(feature.name.toLowerCase());\n\n            if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n              // Add all the aliases into the names list\n              for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n                featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n              }\n            }\n          } // Run the test, or use the raw value if it's not a function\n\n\n          result = is(feature.fn, 'function') ? feature.fn() : feature.fn; // Set each of the names on the Modernizr object\n\n          for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n            featureName = featureNames[nameIdx]; // Support dot properties as sub tests. We don't do checking to make sure\n            // that the implied parent tests have been added. You must call them in\n            // order (either in the test, or make the parent test a dependency).\n            //\n            // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n            // hashtag famous last words\n\n            featureNameSplit = featureName.split('.');\n\n            if (featureNameSplit.length === 1) {\n              Modernizr[featureNameSplit[0]] = result;\n            } else {\n              // cast to a Boolean, if not one already\n              if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n                Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n              }\n\n              Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n            }\n\n            classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n          }\n        }\n      }\n    }\n\n    ;\n    /**\n     * If the browsers follow the spec, then they would expose vendor-specific styles as:\n     *   elem.style.WebkitBorderRadius\n     * instead of something like the following (which is technically incorrect):\n     *   elem.style.webkitBorderRadius\n      * WebKit ghosts their properties in lowercase but Opera & Moz do not.\n     * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n     *   erik.eae.net/archives/2008/03/10/21.48.10/\n      * More here: github.com/Modernizr/Modernizr/issues/issue/21\n     *\n     * @access private\n     * @returns {string} The string representing the vendor-specific style properties\n     */\n\n    var omPrefixes = 'Moz O ms Webkit';\n    /**\n     * List of JavaScript DOM values used for tests\n     *\n     * @memberof Modernizr\n     * @name Modernizr._domPrefixes\n     * @optionName Modernizr._domPrefixes\n     * @optionProp domPrefixes\n     * @access public\n     * @example\n     *\n     * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather\n     * than kebab-case properties, all properties are their Capitalized variant\n     *\n     * ```js\n     * Modernizr._domPrefixes === [ \"Moz\", \"O\", \"ms\", \"Webkit\" ];\n     * ```\n     */\n\n    var domPrefixes = ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : [];\n    ModernizrProto._domPrefixes = domPrefixes;\n    /**\n     * docElement is a convenience wrapper to grab the root element of the document\n     *\n     * @access private\n     * @returns {HTMLElement|SVGElement} The root element of the document\n     */\n\n    var docElement = document.documentElement;\n    /**\n     * A convenience helper to check if the document we are running in is an SVG document\n     *\n     * @access private\n     * @returns {boolean}\n     */\n\n    var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n    /**\n     * createElement is a convenience wrapper around document.createElement. Since we\n     * use createElement all over the place, this allows for (slightly) smaller code\n     * as well as abstracting away issues with creating elements in contexts other than\n     * HTML documents (e.g. SVG documents).\n     *\n     * @access private\n     * @function createElement\n     * @returns {HTMLElement|SVGElement} An HTML or SVG element\n     */\n\n    function createElement() {\n      if (typeof document.createElement !== 'function') {\n        // This is the case in IE7, where the type of createElement is \"object\".\n        // For this reason, we cannot call apply() as Object is not a Function.\n        return document.createElement(arguments[0]);\n      } else if (isSVG) {\n        return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n      } else {\n        return document.createElement.apply(document, arguments);\n      }\n    }\n\n    ;\n    /**\n     * Modernizr.hasEvent() detects support for a given event\n     *\n     * @memberof Modernizr\n     * @name Modernizr.hasEvent\n     * @optionName Modernizr.hasEvent()\n     * @optionProp hasEvent\n     * @access public\n     * @function hasEvent\n     * @param  {string|*} eventName - the name of an event to test for (e.g. \"resize\")\n     * @param  {Element|string} [element=HTMLDivElement] - is the element|document|window|tagName to test on\n     * @returns {boolean}\n     * @example\n     *  `Modernizr.hasEvent` lets you determine if the browser supports a supplied event.\n     *  By default, it does this detection on a div element\n     *\n     * ```js\n     *  hasEvent('blur') // true;\n     * ```\n     *\n     * However, you are able to give an object as a second argument to hasEvent to\n     * detect an event on something other than a div.\n     *\n     * ```js\n     *  hasEvent('devicelight', window) // true;\n     * ```\n     *\n     */\n\n    var hasEvent = function () {\n      // Detect whether event support can be detected via `in`. Test on a DOM element\n      // using the \"blur\" event b/c it should always exist. bit.ly/event-detection\n      var needsFallback = !('onblur' in document.documentElement);\n\n      function inner(eventName, element) {\n        var isSupported;\n\n        if (!eventName) {\n          return false;\n        }\n\n        if (!element || typeof element === 'string') {\n          element = createElement(element || 'div');\n        } // Testing via the `in` operator is sufficient for modern browsers and IE.\n        // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and\n        // \"resize\", whereas `in` \"catches\" those.\n\n\n        eventName = 'on' + eventName;\n        isSupported = eventName in element; // Fallback technique for old Firefox - bit.ly/event-detection\n\n        if (!isSupported && needsFallback) {\n          if (!element.setAttribute) {\n            // Switch to generic element if it lacks `setAttribute`.\n            // It could be the `document`, `window`, or something else.\n            element = createElement('div');\n          }\n\n          element.setAttribute(eventName, '');\n          isSupported = typeof element[eventName] === 'function';\n\n          if (element[eventName] !== undefined) {\n            // If property was created, \"remove it\" by setting value to `undefined`.\n            element[eventName] = undefined;\n          }\n\n          element.removeAttribute(eventName);\n        }\n\n        return isSupported;\n      }\n\n      return inner;\n    }();\n\n    ModernizrProto.hasEvent = hasEvent;\n    /*!\n    {\n      \"name\": \"DOM Pointer Events API\",\n      \"property\": \"pointerevents\",\n      \"tags\": [\"input\"],\n      \"authors\": [\"Stu Cox\"],\n      \"notes\": [\n        {\n          \"name\": \"W3C Pointer Events\",\n          \"href\": \"https://www.w3.org/TR/pointerevents/\"\n        },{\n          \"name\": \"W3C Pointer Events Level 2\",\n          \"href\": \"https://www.w3.org/TR/pointerevents2/\"\n        },{\n        \"name\": \"MDN documentation\",\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent\"\n      }],\n      \"warnings\": [\"This property name now refers to W3C DOM PointerEvents: https://github.com/Modernizr/Modernizr/issues/548#issuecomment-12812099\"],\n      \"polyfills\": [\"pep\"]\n    }\n    !*/\n\n    /* DOC\n    Detects support for the DOM Pointer Events API, which provides a unified event interface for pointing input devices, as implemented in IE10+, Edge and Blink.\n    */\n    // **Test name hijacked!**\n    // Now refers to W3C DOM PointerEvents spec rather than the CSS pointer-events property.\n\n    Modernizr.addTest('pointerevents', function () {\n      // Cannot use `.prefixed()` for events, so test each prefix\n      var bool = false,\n          i = domPrefixes.length; // Don't forget un-prefixed...\n\n      bool = Modernizr.hasEvent('pointerdown');\n\n      while (i-- && !bool) {\n        if (hasEvent(domPrefixes[i] + 'pointerdown')) {\n          bool = true;\n        }\n      }\n\n      return bool;\n    });\n    /**\n     * List of property values to set for css tests. See ticket #21\n     * http://git.io/vUGl4\n     *\n     * @memberof Modernizr\n     * @name Modernizr._prefixes\n     * @optionName Modernizr._prefixes\n     * @optionProp prefixes\n     * @access public\n     * @example\n     *\n     * Modernizr._prefixes is the internal list of prefixes that we test against\n     * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply\n     * an array of kebab-case vendor prefixes you can use within your code.\n     *\n     * Some common use cases include\n     *\n     * Generating all possible prefixed version of a CSS property\n     * ```js\n     * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');\n     *\n     * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'\n     * ```\n     *\n     * Generating all possible prefixed version of a CSS value\n     * ```js\n     * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';\n     *\n     * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'\n     * ```\n     */\n    // we use ['',''] rather than an empty array in order to allow a pattern of .`join()`ing prefixes to test\n    // values in feature detects to continue to work\n\n    var prefixes = ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : ['', '']; // expose these for the plugin API. Look in the source for how to join() them against your input\n\n    ModernizrProto._prefixes = prefixes;\n    /**\n     * getBody returns the body of a document, or an element that can stand in for\n     * the body if a real body does not exist\n     *\n     * @access private\n     * @function getBody\n     * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n     * artificially created element that stands in for the body\n     */\n\n    function getBody() {\n      // After page load injecting a fake body doesn't work so check if body exists\n      var body = document.body;\n\n      if (!body) {\n        // Can't use the real body create a fake one.\n        body = createElement(isSVG ? 'svg' : 'body');\n        body.fake = true;\n      }\n\n      return body;\n    }\n\n    ;\n    /**\n     * injectElementWithStyles injects an element with style element and some CSS rules\n     *\n     * @access private\n     * @function injectElementWithStyles\n     * @param {string} rule - String representing a css rule\n     * @param {function} callback - A function that is used to test the injected element\n     * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n     * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n     * @returns {boolean}\n     */\n\n    function injectElementWithStyles(rule, callback, nodes, testnames) {\n      var mod = 'modernizr';\n      var style;\n      var ret;\n      var node;\n      var docOverflow;\n      var div = createElement('div');\n      var body = getBody();\n\n      if (parseInt(nodes, 10)) {\n        // In order not to give false positives we create a node for each test\n        // This also allows the method to scale for unspecified uses\n        while (nodes--) {\n          node = createElement('div');\n          node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n          div.appendChild(node);\n        }\n      }\n\n      style = createElement('style');\n      style.type = 'text/css';\n      style.id = 's' + mod; // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n\n      (!body.fake ? div : body).appendChild(style);\n      body.appendChild(div);\n\n      if (style.styleSheet) {\n        style.styleSheet.cssText = rule;\n      } else {\n        style.appendChild(document.createTextNode(rule));\n      }\n\n      div.id = mod;\n\n      if (body.fake) {\n        //avoid crashing IE8, if background image is used\n        body.style.background = ''; //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n\n        body.style.overflow = 'hidden';\n        docOverflow = docElement.style.overflow;\n        docElement.style.overflow = 'hidden';\n        docElement.appendChild(body);\n      }\n\n      ret = callback(div, rule); // If this is done after page load we don't want to remove the body so check if body exists\n\n      if (body.fake) {\n        body.parentNode.removeChild(body);\n        docElement.style.overflow = docOverflow; // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n        // eslint-disable-next-line\n\n        docElement.offsetHeight;\n      } else {\n        div.parentNode.removeChild(div);\n      }\n\n      return !!ret;\n    }\n\n    ;\n    /**\n     * testStyles injects an element with style element and some CSS rules\n     *\n     * @memberof Modernizr\n     * @name Modernizr.testStyles\n     * @optionName Modernizr.testStyles()\n     * @optionProp testStyles\n     * @access public\n     * @function testStyles\n     * @param {string} rule - String representing a css rule\n     * @param {function} callback - A function that is used to test the injected element\n     * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n     * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n     * @returns {boolean}\n     * @example\n     *\n     * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page\n     * along with (possibly multiple) DOM elements. This lets you check for features\n     * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).\n     *\n     * ```js\n     * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {\n     *   // elem is the first DOM node in the page (by default #modernizr)\n     *   // rule is the first argument you supplied - the CSS rule in string form\n     *\n     *   addTest('widthworks', elem.style.width === '9px')\n     * });\n     * ```\n     *\n     * If your test requires multiple nodes, you can include a third argument\n     * indicating how many additional div elements to include on the page. The\n     * additional nodes are injected as children of the `elem` that is returned as\n     * the first argument to the callback.\n     *\n     * ```js\n     * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {\n     *   document.getElementById('modernizr').style.width === '1px'; // true\n     *   document.getElementById('modernizr2').style.width === '2px'; // true\n     *   elem.firstChild === document.getElementById('modernizr2'); // true\n     * }, 1);\n     * ```\n     *\n     * By default, all of the additional elements have an ID of `modernizr[n]`, where\n     * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,\n     * the second additional is `#modernizr3`, etc.).\n     * If you want to have more meaningful IDs for your function, you can provide\n     * them as the fourth argument, as an array of strings\n     *\n     * ```js\n     * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {\n     *   elem.firstChild === document.getElementById('foo'); // true\n     *   elem.lastChild === document.getElementById('bar'); // true\n     * }, 2, ['foo', 'bar']);\n     * ```\n     *\n     */\n\n    var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\n    /*!\n    {\n      \"name\": \"Touch Events\",\n      \"property\": \"touchevents\",\n      \"caniuse\" : \"touch\",\n      \"tags\": [\"media\", \"attribute\"],\n      \"notes\": [{\n        \"name\": \"Touch Events spec\",\n        \"href\": \"https://www.w3.org/TR/2013/WD-touch-events-20130124/\"\n      }],\n      \"warnings\": [\n        \"Indicates if the browser supports the Touch Events spec, and does not necessarily reflect a touchscreen device\"\n      ],\n      \"knownBugs\": [\n        \"False-positive on some configurations of Nokia N900\",\n        \"False-positive on some BlackBerry 6.0 builds – https://github.com/Modernizr/Modernizr/issues/372#issuecomment-3112695\"\n      ]\n    }\n    !*/\n\n    /* DOC\n    Indicates if the browser supports the W3C Touch Events API.\n    \n    This *does not* necessarily reflect a touchscreen device:\n    \n    * Older touchscreen devices only emulate mouse events\n    * Modern IE touch devices implement the Pointer Events API instead: use `Modernizr.pointerevents` to detect support for that\n    * Some browsers & OS setups may enable touch APIs when no touchscreen is connected\n    * Future browsers may implement other event models for touch interactions\n    \n    See this article: [You Can't Detect A Touchscreen](http://www.stucox.com/blog/you-cant-detect-a-touchscreen/).\n    \n    It's recommended to bind both mouse and touch/pointer events simultaneously – see [this HTML5 Rocks tutorial](http://www.html5rocks.com/en/mobile/touchandmouse/).\n    \n    This test will also return `true` for Firefox 4 Multitouch support.\n    */\n    // Chrome (desktop) used to lie about its support on this, but that has since been rectified: http://crbug.com/36415\n\n    Modernizr.addTest('touchevents', function () {\n      var bool;\n\n      if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {\n        bool = true;\n      } else {\n        // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n        // https://git.io/vznFH\n        var query = ['@media (', prefixes.join('touch-enabled),('), 'heartz', ')', '{#modernizr{top:9px;position:absolute}}'].join('');\n        testStyles(query, function (node) {\n          bool = node.offsetTop === 9;\n        });\n      }\n\n      return bool;\n    }); // Run each test\n\n    testRunner();\n    delete ModernizrProto.addTest;\n    delete ModernizrProto.addAsyncTest; // Run the things that are supposed to run after the tests\n\n    for (var i = 0; i < Modernizr._q.length; i++) {\n      Modernizr._q[i]();\n    } // Leak Modernizr namespace\n\n\n    window.Modernizr = Modernizr;\n    ;\n  })(window, document);\n\n  module.exports = window.Modernizr;\n\n  if (hadGlobal) {\n    window.Modernizr = oldGlobal;\n  } else {\n    delete window.Modernizr;\n  }\n})(window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./.modernizrrc.js\n");

/***/ }),

/***/ "./js/cookies.js":
/*!***********************!*\
  !*** ./js/cookies.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = gestisciCookies;\n\n// Inizio Modulo\n\n/**\n * Metodo gestione impostazione cookies\n * Setter\n * @param {string} n Nome cookie\n * @param {string} v Valore cookie\n */\nfunction ck(n, v) {\n  var s = new Date();\n  s.setDate(s.getDate() + 30);\n  document.cookie = n + '=' + escape(v) + '; expires=' + s.toGMTString() + '; path=/;';\n}\n/**\n * Metodo gestione controllo cookies\n * setter\n * @param {string} n Nome cookie \n * @return {string} Valore cookie\n */\n\n\nfunction l(n) {\n  if (document.cookie.length > 0) {\n    var i = document.cookie.indexOf(n + '=');\n\n    if (i != -1) {\n      i = i + n.length + 1;\n      var f = document.cookie.indexOf(';', i);\n\n      if (f == -1) {\n        f = document.cookie.length;\n      }\n\n      return unescape(document.cookie.substring(i, f));\n    } else {\n      return '';\n    }\n  }\n\n  return '';\n}\n/**\n * Metodo gestione eliminazione cookies\n * Setter\n * @param {string} n Nome cookie\n */\n\n\nfunction dk(n) {\n  document.cookie = n + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/;';\n}\n/**\n * Metodo gestione controllo accettazione cookies\n * Getter\n * @param {string} n Nome cookie\n */\n\n\nfunction ak(n) {\n  var c = l(n); // Controllo Cookie\n  // Se non è stata accettata la policy\n\n  if (c === '' && n === 'cookie_law_stack') {\n    $('.cookies__form__etichetta__campo').each(function () {\n      $(this).attr('checked', 'checked');\n    });\n    $('.cookies').fadeIn();\n  } else if (c === '') {\n    // Altrimenti se non esiste\n    switch (n) {\n      case 'google_stack':\n        $('#google-cookie').removeAttr('checked');\n        break;\n\n      default:\n    }\n  } else if (c !== '') {\n    // Altrimenti se esiste\n    switch (n) {\n      case 'cookie_law_stack':\n        $('.cookies__cta').removeClass('aperto');\n        $('.cookies__corpo, .cookies__form, .cookies__cta--accetta, .cookies__corpo__chiudi--avviso').addClass('nascondi');\n        $('.cookies, .cookies__container').addClass('chiuso');\n        $('.cookies__container, .cookies__cta--impostazioni').removeClass('aperto');\n        $('.cookies').addClass('mobile');\n        $('.cookies__cta--impostazioni').html('Cookies');\n        break;\n\n      case 'google_stack':\n        $('#google-cookie').attr('checked', 'checked');\n        break;\n\n      default:\n    }\n  }\n}\n/**\n * Metodo gestione cookies\n * Setter\n * @export\n */\n\n\nfunction gestisciCookies() {\n  document.cookie = 'test_cookie';\n  var t = document.cookie.indexOf('test_cookie') != -1 ? true : false;\n  var n = ['cookie_law_stack', 'google_stack'];\n\n  if (t) {\n    for (var i in n) {\n      ak(n[i]);\n    } // Impostazioni\n\n\n    $('.cookies__cta--impostazioni').on('click tap', function (e) {\n      e.preventDefault();\n      $('.cookies, .cookies__container').removeClass('chiuso');\n      $('.cookies, .cookies__container, .cookies__cta, .cookies__cta--impostazioni').addClass('aperto');\n      $('.cookies__corpo, .cookies__form, .cookies__cta--accetta, .cookies__cta--opt-out, .cookies__cta--salva, .cookies__corpo__chiudi--avviso').removeClass('nascondi');\n      $('.cookies--avviso').removeClass('animated slideInDown').addClass('nascondi');\n      $('.cookies').removeClass('mobile');\n\n      if ($('html').attr('lang') == 'it-IT') {\n        $('.cookies__cta--impostazioni').html('Impostazioni');\n      } else {\n        $('.cookies__cta--impostazioni').html('Settings');\n      }\n\n      $('.cookies--impostazioni').removeClass('nascondi animated slideOutUp').addClass('animated slideInDown');\n    }); // Accettazione\n\n    $('.cookies__cta--accetta').on('click tap', function (e) {\n      e.preventDefault(); // Cookie Policy\n\n      if (l('cookie_law_stack') === '') {\n        ck('cookie_law_stack', 'accettata'); // Invio notifica\n\n        $.post('/php/cookies-notifica.php');\n      } // Cookies terze parti\n\n\n      $('.cookies__form__etichetta__campo').each(function () {\n        if (l($(this).val()) === '') {\n          ck($(this).val(), 'accettata');\n          ak($(this).val());\n        }\n      });\n    }); // Salvataggio\n\n    $('.cookies__cta--salva').on('click tap', function (e) {\n      e.preventDefault(); // Aggiornamento Cookies\n\n      $('.cookies__form__etichetta__campo').each(function (i, elemento) {\n        if ($(elemento).attr('checked')) {\n          ck($(elemento).val(), 'accettata');\n          ak($(elemento).val());\n        } else {\n          dk($(elemento).val());\n          ak($(elemento).val());\n        }\n      });\n    }); // Opt-Out\n\n    $('.cookies__cta--opt-out').on('click tap', function (e) {\n      e.preventDefault(); // Disattivazione Cookies\n\n      $('.cookies__form__etichetta__campo').each(function (i, elemento) {\n        $(elemento).removeAttr('checked');\n        dk($(elemento).val());\n        ak($(elemento).val());\n      });\n    }); // Chiusura\n\n    $('.cookies__corpo__chiudi--avviso').on('click tap', function () {\n      $('.cookies').addClass('animated fadeOut');\n      setTimeout(function () {\n        $('.cookies').addClass('nascondi');\n      }, 500);\n    });\n    $('.cookies__corpo__chiudi--impostazioni').on('click tap', function () {\n      $('.cookies--impostazioni').removeClass('animated slideInDown').addClass('nascondi');\n      $('.cookies').removeClass('aperto');\n      $('.cookies__container').addClass('aperto');\n      $('.cookies--avviso').removeClass('nascondi animated slideOutUp').addClass('animated slideInDown');\n      $('.cookies__cta').addClass('aperto');\n    }); // UX\n\n    $('.cookies__form__etichetta__campo').on('change', function () {\n      if ($(this).attr('checked')) {\n        $(this).removeAttr('checked');\n      } else {\n        $(this).attr('checked', 'checked');\n      }\n    });\n    $('.cookies__cta--accetta, .cookies__cta--salva').on('click tap', function () {\n      $('.cookies__cta, .cookies__container').removeClass('aperto');\n      $('.cookies__corpo, .cookies__form, .cookies__cta--accetta, .cookies__cta--opt-out, .cookies__cta--salva, .cookies__corpo__chiudi--avviso').addClass('nascondi');\n      $('.cookies--avviso').removeClass('nascondi');\n      $('.cookies, .cookies__container').addClass('chiuso');\n      $('.cookies').addClass('mobile');\n      $('.cookies__cta--impostazioni').html('Cookies');\n    });\n    $(window).on('scroll', function () {\n      if ($(this).scrollTop() + $(this).outerHeight() >= $('.footer--bottom').offset().top) {\n        $('.cookies.chiuso').removeClass('mobile');\n      } else {\n        $('.cookies.chiuso').addClass('mobile');\n      }\n    });\n  }\n} // Fine Modulo//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/cookies.js\n");

/***/ }),

/***/ "./js/home.js":
/*!********************!*\
  !*** ./js/home.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Importazione SASS\n\n__webpack_require__(/*! ../sass/index.scss */ \"./sass/index.scss\");\n\n__webpack_require__(/*! ../sass/home.scss */ \"./sass/home.scss\");\n\nvar _jquery = __webpack_require__(/*! jquery */ \"jquery\");\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _modernizr = __webpack_require__(/*! modernizr */ \"./.modernizrrc.js\");\n\nvar _modernizr2 = _interopRequireDefault(_modernizr);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Importazione Librerie\n\n/**\n * if (!Modernizr.pointerevents && !Modernizr.touchevents) {\n *   // ...\n * }\n */\n// Main\n(0, _jquery2.default)(document).ready(function () {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9ob21lLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vanMvaG9tZS5qcz8zZDI4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gSW1wb3J0YXppb25lIFNBU1NcbmltcG9ydCAnLi4vc2Fzcy9pbmRleC5zY3NzJztcbmltcG9ydCAnLi4vc2Fzcy9ob21lLnNjc3MnO1xuLy8gSW1wb3J0YXppb25lIExpYnJlcmllXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IE1vZGVybml6ciBmcm9tICdtb2Rlcm5penInO1xuLyoqXG4gKiBpZiAoIU1vZGVybml6ci5wb2ludGVyZXZlbnRzICYmICFNb2Rlcm5penIudG91Y2hldmVudHMpIHtcbiAqICAgLy8gLi4uXG4gKiB9XG4gKi9cblxuLy8gTWFpblxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xufSk7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUhBO0FBQ0E7QUFFQTs7Ozs7QUFNQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/home.js\n");

/***/ }),

/***/ "./js/index.js":
/*!*********************!*\
  !*** ./js/index.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Importazione SASS\n\n__webpack_require__(/*! ../sass/index.scss */ \"./sass/index.scss\");\n\nvar _jquery = __webpack_require__(/*! jquery */ \"jquery\");\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _modernizr = __webpack_require__(/*! modernizr */ \"./.modernizrrc.js\");\n\nvar _modernizr2 = _interopRequireDefault(_modernizr);\n\nvar _cookies = __webpack_require__(/*! ./cookies.js */ \"./js/cookies.js\");\n\nvar _cookies2 = _interopRequireDefault(_cookies);\n\nvar _tornaSu = __webpack_require__(/*! ./torna-su.js */ \"./js/torna-su.js\");\n\nvar _tornaSu2 = _interopRequireDefault(_tornaSu);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Importazione Librerie\n\n/**\n * if (!Modernizr.pointerevents && !Modernizr.touchevents) {\n *   // ...\n * }\n */\n// Main\n(0, _jquery2.default)(document).ready(function () {\n  (0, _cookies2.default)();\n  (0, _tornaSu2.default)();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2pzL2luZGV4LmpzP2VlMWMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBJbXBvcnRhemlvbmUgU0FTU1xuaW1wb3J0ICcuLi9zYXNzL2luZGV4LnNjc3MnO1xuLy8gSW1wb3J0YXppb25lIExpYnJlcmllXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IE1vZGVybml6ciBmcm9tICdtb2Rlcm5penInO1xuaW1wb3J0IGdlc3Rpc2NpQ29va2llcyBmcm9tICcuL2Nvb2tpZXMuanMnO1xuaW1wb3J0IGluaXppYWxpenphVG9ybmFTdSBmcm9tICcuL3Rvcm5hLXN1LmpzJztcbi8qKlxuICogaWYgKCFNb2Rlcm5penIucG9pbnRlcmV2ZW50cyAmJiAhTW9kZXJuaXpyLnRvdWNoZXZlbnRzKSB7XG4gKiAgIC8vIC4uLlxuICogfVxuICovXG5cbi8vIE1haW5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgZ2VzdGlzY2lDb29raWVzKCk7XG4gIGluaXppYWxpenphVG9ybmFTdSgpO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBTEE7QUFDQTtBQUlBOzs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/index.js\n");

/***/ }),

/***/ "./js/torna-su.js":
/*!************************!*\
  !*** ./js/torna-su.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = inizializzaTornaSu;\n\n// Inizio Modulo\n\n/**\n * Funzione gestione UX Torna Su\n * Setter\n * @export\n */\nfunction inizializzaTornaSu() {\n  $(window).on('scroll', function () {\n    if ($(this).scrollTop() > 0) {\n      $('.torna-su').removeClass('occulta');\n    } else {\n      $('.torna-su').addClass('occulta');\n    }\n\n    if ($(this).scrollTop() + $(this).height() == $(document).height()) {\n      $('.torna-su').addClass('solleva');\n    } else {\n      $('.torna-su').removeClass('solleva');\n    }\n  });\n  $('.torna-su').on('click tap', function () {\n    $('html, body').animate({\n      scrollTop: 0\n    }, 'fast');\n  });\n} // Fine Modulo//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy90b3JuYS1zdS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2pzL3Rvcm5hLXN1LmpzP2IxN2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW5pemlvIE1vZHVsb1xuLyoqXG4gKiBGdW56aW9uZSBnZXN0aW9uZSBVWCBUb3JuYSBTdVxuICogU2V0dGVyXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXppYWxpenphVG9ybmFTdSgpIHtcbiAgJCh3aW5kb3cpLm9uKCdzY3JvbGwnLCBmdW5jdGlvbigpIHtcbiAgICBpZiAoJCh0aGlzKS5zY3JvbGxUb3AoKSA+IDApIHtcbiAgICAgICQoJy50b3JuYS1zdScpLnJlbW92ZUNsYXNzKCdvY2N1bHRhJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoJy50b3JuYS1zdScpLmFkZENsYXNzKCdvY2N1bHRhJyk7XG4gICAgfVxuICAgIGlmICgoJCh0aGlzKS5zY3JvbGxUb3AoKSArICQodGhpcykuaGVpZ2h0KCkpID09XG4gICAgICAkKGRvY3VtZW50KS5oZWlnaHQoKSkge1xuICAgICAgJCgnLnRvcm5hLXN1JykuYWRkQ2xhc3MoJ3NvbGxldmEnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCgnLnRvcm5hLXN1JykucmVtb3ZlQ2xhc3MoJ3NvbGxldmEnKTtcbiAgICB9XG4gIH0pO1xuICAkKCcudG9ybmEtc3UnKS5vbignY2xpY2sgdGFwJywgKCkgPT4ge1xuICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcbiAgICAgIHNjcm9sbFRvcDogMCxcbiAgICB9LCAnZmFzdCcpO1xuICB9KTtcbn1cbi8vIEZpbmUgTW9kdWxvXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBTUE7QUFDQTtBQVBBO0FBQ0E7QUFBQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/torna-su.js\n");

/***/ }),

/***/ "./sass/home.scss":
/*!************************!*\
  !*** ./sass/home.scss ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zYXNzL2hvbWUuc2Nzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Nhc3MvaG9tZS5zY3NzP2U2MWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./sass/home.scss\n");

/***/ }),

/***/ "./sass/index.scss":
/*!*************************!*\
  !*** ./sass/index.scss ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zYXNzL2luZGV4LnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zYXNzL2luZGV4LnNjc3M/MDAyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./sass/index.scss\n");

/***/ }),

/***/ 0:
/*!****************************************!*\
  !*** multi ./js/index.js ./js/home.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./js/index.js */"./js/index.js");
module.exports = __webpack_require__(/*! ./js/home.js */"./js/home.js");


/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = jQuery;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianF1ZXJ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwialF1ZXJ5XCI/Y2QwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///jquery\n");

/***/ })

/******/ });